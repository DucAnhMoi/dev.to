generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Tag {
  id    Int    @id @default(autoincrement())
  name  String @unique
  color String

  posts PostTags[]
}

model Post {
  id          Int      @id @default(autoincrement())
  title       String
  content     String
  reactions   Reaction[]
  comments    Comment[]
  saves       Save[]
  readingTime Int
  picturePost String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @default(now())
  createdBy   User     @relation(fields: [createdById], references: [id])
  createdById String
  tags        PostTags[]
  interactions Interacts[]  // Add reverse relation field

  @@index([title])
}

model ReactionType {
  id        Int        @id @default(autoincrement())
  name      String     @unique
  reactions Reaction[]
}

model Reaction {
  id           Int           @id @default(autoincrement())
  userId       String
  postId       Int
  reactTypeId  Int

  post         Post          @relation(fields: [postId], references: [id])
  type         ReactionType  @relation(fields: [reactTypeId], references: [id])
}

model Comment {
  id              Int                @id @default(autoincrement())
  content         String
  createdAt       DateTime           @default(now())
  postId          Int
  userId          String
  parentId        Int?

  post            Post               @relation(fields: [postId], references: [id])
  parent          Comment?           @relation("CommentToComment", fields: [parentId], references: [id])
  children        Comment[]          @relation("CommentToComment")
  reactions       ReactionComment[]  @relation("CommentReactions")

  @@index([postId])
}

model ReactionComment {
  id        Int     @id @default(autoincrement())
  userId    String
  commentId Int
  comment   Comment @relation(fields: [commentId], references: [id], onDelete: Cascade, name: "CommentReactions")

  @@index([commentId])
}

model Save {
  userId String
  postId Int

  post   Post   @relation(fields: [postId], references: [id])
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, postId])
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id                    String    @id @default(cuid())
  name                  String?
  email                 String?   @unique
  emailVerified         DateTime?
  image                 String?
  accounts              Account[]
  sessions              Session[]
  posts                 Post[]
  saves                 Save[]
  sentNotifications     Notifications[] @relation(name: "SentNotifications")
  receivedNotifications Notifications[] @relation(name: "ReceivedNotifications")
  interactions          Interacts[]

  @@index([email])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model PostTags {
  postId Int
  tagId  Int

  post Post @relation(fields: [postId], references: [id])
  tag  Tag  @relation(fields: [tagId], references: [id])

  @@id([postId, tagId])
}

model Notifications {
  id          Int    @id @default(autoincrement())
  senderId    String
  receivedId  String
  message     String
  seen        Boolean

  sender      User   @relation(name: "SentNotifications", fields: [senderId], references: [id], onDelete: Cascade)
  received    User   @relation(name: "ReceivedNotifications", fields: [receivedId], references: [id], onDelete: Cascade)
}

model Interacts {
  id        Int      @id @default(autoincrement())
  userId    String
  postId    Int
  type      String
  timestamp DateTime     

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  post Post @relation(fields: [postId], references: [id])
}
